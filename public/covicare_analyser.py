# -*- coding: utf-8 -*-
"""covicare_analyser.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1milbLQeijt5gWUwI-eNaNuIAv-I_mKuc

## COVICARE ANALYSER 

- [Github Repository](https://github.com/Jeevitha10/ACM_W2021_Access-Denied) to project **COVICARE**
- COVID Predictions Machine Learning Model
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as ncolors
import random
import math
import time
from sklearn.model_selection import RandomizedSearchCV,train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error,mean_absolute_error
import datetime
import operator
plt.style.use('seaborn')
import seaborn as sns
import pickle
# %matplotlib inline

confirmed=pd.read_csv('https://raw.githubusercontent.com/Jeevitha10/ACM_W2021_Access-Denied/main/confirmed.csv')

recovered=pd.read_csv('https://raw.githubusercontent.com/Jeevitha10/ACM_W2021_Access-Denied/main/recovered.csv')

deceased=pd.read_csv('https://raw.githubusercontent.com/Jeevitha10/ACM_W2021_Access-Denied/main/deceased.csv')

confirmed.head()

recovered.head()

deceased.head()

cols=confirmed.keys()

cols

confirmed.drop(confirmed[confirmed['State_Name']=='Total'].index,inplace=True)

confirmed.drop(confirmed[confirmed['State_Name']=='State Unassigned'].index,inplace=True)

confirmed=confirmed.loc[:38,:]

confirmed

confirmed_dates=confirmed.loc[:,cols[1]:cols[-1]]

confirmed_dates

recovered

recovered.drop(recovered[recovered['State_Name']=='Total'].index,inplace=True)

recovered.drop(recovered[recovered['State_Name']=='State Unassigned'].index,inplace=True)

recovered_dates=recovered.loc[:39,cols[1]:cols[-1]]

recovered

recovered_dates

deceased.drop(deceased[deceased['State_Name']=='Total'].index,inplace=True)

deceased.drop(deceased[deceased['State_Name']=='State Unassigned'].index,inplace=True)

deceased=deceased.loc[:38,:]

deceased_dates=deceased.loc[:,cols[1]:cols[-1]]

deceased

deceased_dates

dates=confirmed_dates.keys()
total_cases=[]
total_deaths=[]
mortality_rate=[]
total_recovered=[]
for i in dates:
    confirmed_sum=confirmed_dates[i].sum()
    death_sum=deceased_dates[i].sum()
    recovered_sum=recovered_dates[i].sum()
    total_cases.append(int(confirmed_sum))
    total_deaths.append(int(death_sum))
    mortality_rate.append(death_sum/confirmed_sum)
    total_recovered.append(recovered_sum)

total_cases

total_deaths

total_recovered

death_sum

recovered_sum

total_cases

dates

days_since_1_04=np.array([i for i in range(len(dates))]).reshape(-1,1)
total_cases=np.array(total_cases).reshape(-1,1)
total_deaths=np.array(total_deaths).reshape(-1,1)
total_recovered=np.array(total_recovered).reshape(-1,1)

total_recovered

days_since_1_04

total_cases

total_deaths

plt.figure(figsize=(10,10),dpi=150)
plt.barh(confirmed['State_Name'],confirmed['20-06-2020'],color='#2C2891')
plt.title("Confirmed Cases as of 20/06/2020 across India")
fig0 = plt.gcf()
#()
plt.draw()
fig0.savefig('static/bar.png', dpi=100)

plt.figure(dpi=150)
plt.plot(total_cases, label = "total cases",color="#316B83")
plt.plot(total_recovered, label = "total recovered",color="#A12568")
plt.legend()
fig1 = plt.gcf()
#()
plt.draw()
fig1.savefig('static/1.png', dpi=100)

days_in_future=10
future_forecast=np.array([i for i in range(len(dates[0:60])+days_in_future)]).reshape(-1,1)
adjusted_dates=future_forecast[:-10]

len(days_since_1_04)

future_forecast

start='1/4/2020'
start_date=datetime.datetime.strptime(start,'%m/%d/%Y')
future_forecast_dates=[]
for i in range(len(future_forecast)):
    future_forecast_dates.append((start_date+datetime.timedelta(days=i)).strftime('%m%d%Y'))

len(days_since_1_04)

unique_states=list(confirmed['State_Name'].unique())
unique_states

latest_confirmed=confirmed[dates[-1]]
latest_deaths=deceased[dates[-1]]
latest_recoveries=recovered[dates[-1]]

state_confirmed_cases=[]
no_cases=[]
for i in unique_states:
    cases=latest_confirmed[confirmed['State_Name']==i].sum()
    if cases>0:
            state_confirmed_cases.append(cases)
    else:
        no_cases.append(i)
        
for i in no_cases:
    unique_states.remove(i)
    
unique_states =[k for k,v in sorted(zip(unique_states,state_confirmed_cases),key=operator.itemgetter(1),reverse=1)]
for i in range(len(unique_states)):
    state_confirmed_cases[i]=latest_confirmed[confirmed['State_Name']==unique_states[i]].sum()

print("confirmed cases by states")
for i in range(len(unique_states)):
    print(f'{unique_states[i]}:{state_confirmed_cases[i]}cases')

data = state_confirmed_cases[:10]
labels = unique_states[:10]
fig, ax = plt.subplots(figsize=(15, 8))


colors = sns.color_palette('Paired')[0:10]
patches, texts, pcts=ax.pie(data, labels=labels,colors=colors, autopct='%.1f%%',
       wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'},
       textprops={'size': 'x-large'},radius=1.25)

plt.setp(pcts, color='white', fontweight='bold')
plt.setp(texts, fontweight=600)
ax.set_title("Most Affected States",fontsize=20)
plt.tight_layout()
fig2 = plt.gcf()
#()
plt.draw()
fig2.savefig('static/2.png', dpi=100)

nan_indices=[]
for i in range(len(unique_states)):
    if type(unique_states[i])==float:
        nan_indices.append[i]
        
unique_states=list(unique_states)
state_confirmed_cases=list(state_confirmed_cases)
for i in nan_indices:
    unique_states.pop(i)
    state_confirmed_cases.pop(i)

X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_04, total_cases, test_size=0.15, shuffle=False)

from sklearn.linear_model import LinearRegression
linear_model=LinearRegression(normalize=True,fit_intercept=True)
linear_model.fit(X_train_confirmed,y_train_confirmed)
test_linear_pred=linear_model.predict(X_test_confirmed)
linear_pred=linear_model.predict(future_forecast)
print("MAE",mean_absolute_error(test_linear_pred,y_test_confirmed))
print("MAE",mean_squared_error(test_linear_pred,y_test_confirmed))

plt.figure(dpi=150)
plt.plot(y_test_confirmed)
plt.plot(test_linear_pred)

fig3 = plt.gcf()
#()
plt.draw()
fig3.savefig('static/3.png', dpi=100)

plt.figure(figsize=(15,12))
plt.plot(days_since_1_04[:70],total_cases[:70])
plt.plot(future_forecast,linear_pred,linestyle='dashed',color='orange')
plt.title('Number of coronavirus cases over time',size=30)
plt.xlabel('days since 1/04/2021',size=30)
plt.ylabel('number of cases',size=30)
plt.legend(['Confirmed cases','Linear Regression predictions'])
plt.xticks(size=15)
plt.yticks(size=15)
fig4 = plt.gcf()
#()
plt.draw()
fig4.savefig('static/4.png', dpi=100)

future_forecast

print('future predictions')
print(linear_pred[-10:])

plt.figure(figsize=(12,12))
plt.plot(days_since_1_04,total_deaths,color='red')
plt.title("number of deaths over time",size=30)
plt.xlabel('Time',size=30)
plt.ylabel('number of deaths',size=30)
plt.xticks(size=20)
plt.yticks(size=20)
fig5 = plt.gcf()
#()
plt.draw()
fig5.savefig('static/5.png', dpi=100)

mean_mortality_rate=np.mean(mortality_rate)
plt.figure(figsize=(15,12))
plt.plot(days_since_1_04,mortality_rate,color='orange')
plt.title("mortality rate over time",size=30)
plt.xlabel('Time',size=30)
plt.ylabel('mortality rate',size=30)
plt.xticks(size=15)
plt.yticks(size=15)
fig6 = plt.gcf()
#()
plt.draw()
fig6.savefig('static/6.png', dpi=100)

plt.figure(figsize=(15,12))
plt.plot(days_since_1_04,total_recovered,color='green')
plt.title("number of recovered over time",size=30)
plt.xlabel('Time',size=30)
plt.ylabel('number of recoveries',size=30)
plt.xticks(size=15)
plt.yticks(size=15)
fig7 = plt.gcf()
#()
plt.draw()
fig7.savefig('static/7.png', dpi=100)

plt.figure(figsize=(20,12))
plt.plot(days_since_1_04,total_deaths,color='red')
plt.plot(days_since_1_04,total_recovered,color='green')
plt.legend(['deaths','recoveries'],fontsize=30)
plt.title("Number of corona virus cases",size=30)
plt.xlabel('Time',size=30)
plt.ylabel('number of cases',size=30)
plt.xticks(size=15)
plt.yticks(size=15)
fig8 = plt.gcf()
#()
plt.draw()
fig8.savefig('static/8.png', dpi=100)

total_cases[60:70]

linear_pred[-10:]


file='trained_model.sav'
f=open(file,'wb')
pickle.dump(linear_model,f)
f.close()

